package com.mutatio.sis.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.mutatio.code.service.ICommCodeService;
import com.mutatio.sis.code.vo.CodeVO;
import com.mutatio.sis.common.vo.ResultMessageVO;
import com.mutatio.sis.exception.BizNotEffectedException;
import com.mutatio.sis.login.service.ILoginService;
import com.mutatio.sis.member.service.MemberService;
import com.mutatio.sis.member.vo.MemberVO;
import com.mutatio.sis.security.CustomUser;

@Controller
public class LoginController {

	@Inject
	private ILoginService loginService;
	
	@Inject
	private MemberService memberService;
	
	@Inject
	ICommCodeService codeService;

	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@ModelAttribute("jobCodeList")
	public List<CodeVO> getJobCodeList(){
		return codeService.getCodeListByParent("JB00");
	}
	@ModelAttribute("conCodeList")	
	public List<CodeVO> getConCodeList(){
		return codeService.getCodeListByParent("CC00");
	}
	
	@RequestMapping(value = "/login.do") 
	public String login(Model model, String error, String logout) {
		logger.info("login.do 요청 error= {}",error);
		logger.info("login.do 요청 logout= {}",logout);
		if (error != null) {
			model.addAttribute("error",error);
		}
		return "login/login"; 
	}

	@RequestMapping(value = "/logout.do")
	public String logout(HttpServletRequest request, HttpServletResponse response) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null) {
			new SecurityContextLogoutHandler().logout(request, response, auth);
		}
		return "redirect:/login.do";
	}

	// 회원가입 form
	@RequestMapping(value = "/join.do")
	public String memberForm(Model model) {
		return "member/memberJoin";
	}	
	
	// 회원등록
	@PostMapping("/joinAction.do")
	public String memberRegist(Model model, MemberVO member) {
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		logger.info("MemberVO {}", member);
		try {
			// 암호화 
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			String securePw = encoder.encode(member.getMemPass());
			member.setMemPass(securePw);
			
			memberService.joinMember(member);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member등록 성공");
			resultMessageVO.setMessage("member등록에 성공하였습니다");
			resultMessageVO.setUrl("/login.do");
			resultMessageVO.setUrlTitle("로그인 창");
		} catch (BizNotEffectedException e) {
			resultMessageVO.setResult(false);
			resultMessageVO.setTitle("member등록 실패");
			resultMessageVO.setMessage("member등록에 실패했습니다.");
			resultMessageVO.setUrl("/join.do");
			resultMessageVO.setUrlTitle("회원가입 창");
		} 
		model.addAttribute("resultMessageVO", resultMessageVO);
		return "common/message";
	}
	
} // class
