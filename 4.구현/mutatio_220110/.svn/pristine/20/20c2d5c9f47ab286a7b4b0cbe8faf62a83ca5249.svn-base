package com.mutatio.sis.controller;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mutatio.code.service.ICommCodeService;
import com.mutatio.sis.code.vo.CodeVO;
import com.mutatio.sis.exception.BizNotEffectedException;
import com.mutatio.sis.exception.BizNotFoundException;
import com.mutatio.sis.member.service.MemberService;
import com.mutatio.sis.member.vo.MemberVO;
import com.mutatio.sis.security.CustomUser;
import com.mutatio.sis.thesis.service.ThesisServiceImpl;
import com.mutatio.sis.thesis.vo.ThesisSearchVO;
import com.mutatio.sis.thesis.vo.ThesisVO;

@Controller
public class ThesisController {
	
	@Inject
	private ThesisServiceImpl thesisService;
	
	@Inject
	private MemberService memberService;
	
	@Inject
	ICommCodeService codeService;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@ModelAttribute("conCodeList")
	public List<CodeVO> ccList() {
		return codeService.getCodeListByParent("CC00");
	}
	
	@RequestMapping(value = "/thesisList.do")
	public String thesis_list(Model model, ThesisSearchVO searchVO) {
		
		logger.info("thesisSearchVO : {}", searchVO);
		
		// Get ThesisVO List
		List<ThesisVO> thesisList =  thesisService.getThesisList(searchVO);
		
		// A Single author insert Object..
		for (ThesisVO vo : thesisList) {
			List<String> auth = thesisService.getAuths(vo.getThesNo());
			vo.setThesAuth(auth.get(0));
		}
		
		logger.info("thesisList : {}", thesisList);
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("thesisList",thesisList);
		return "thesis/thesisList";
	}	
	
	
	@RequestMapping(value = "/thesisView.do")
	public String thesisView(Model model, HttpSession sess,
			@RequestParam(value="thesNo") int thesNo) throws BizNotFoundException, BizNotEffectedException { // temp
		ThesisVO thesis = thesisService.getThesis(thesNo); // A Single thesis
		// Multiple authors insert Object..
		List<String> auths = thesisService.getAuths(thesis.getThesNo());
		thesis = thesisService.getAppendAuth(thesis, auths);// thesis + auths
		model.addAttribute("thesis",thesis);
		
		List<String> keywordList = thesisService.getKeyword(thesNo); // Thesis Keywords
		String appendKeyword = thesisService.getAppendKeyword(keywordList);
		model.addAttribute("keywords",appendKeyword);
		
		float quality = thesisService.quality(thesNo); // Quality index
		model.addAttribute("quality",quality);
		
		//bookmarkCheck
		CustomUser USER = (CustomUser)sess.getAttribute("USER_INFO");
		boolean isBookMark = false;
		if (USER!=null) {
			MemberVO member= memberService.getMemBookMark(USER.getUsername());		
			for(int num : member.getThesNo()) {
				if(num == thesNo) {
					isBookMark = true;
				}
				thesisService.getMemReferThesis(member, thesNo);
			}
		} // end if
		model.addAttribute("isBookMark", isBookMark);
		// bookmarkCheck End
		
		List<ThesisVO> addInfo = thesisService.getAddInfo(thesNo);
		model.addAttribute("addInfo",addInfo);
		
		return "thesis/thesisView";
	}
	
	
	
	/**
	 * <pre>
	 * 	drawing chart (Page ThesisView)
	 * </pre>
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/chartA.do")
	@ResponseBody
	public Map<String,Integer> chartA(Model model) {
		Map<String,Integer> chartData = thesisService.graph();
		Object[] mapkey = chartData.keySet().toArray();
		Arrays.sort(mapkey); // 키 값으로 정렬하기
		
		Map<String,Integer> chartClone = new LinkedHashMap<String,Integer>();
		for (Integer i = 0; i < mapkey.length; i++) {
			chartClone.put(
					 (String) mapkey[i]	      // key 값
					,chartData.get(mapkey[i]) // value 값
					);
		}
		
		logger.info("chart: {}", chartClone);
		return chartClone;
	}
	
	
	
	
	
}// class
















