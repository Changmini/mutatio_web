package com.mutatio.sis.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.mutatio.sis.common.vo.ResultMessageVO;
import com.mutatio.sis.exception.BizAccessFailException;
import com.mutatio.sis.exception.BizNotFoundException;
import com.mutatio.sis.member.vo.MemberVO;
import com.mutatio.sis.reply.service.IReplyService;
import com.mutatio.sis.reply.service.QReplyServiceImpl;
import com.mutatio.sis.reply.vo.FReplySearchVO;
import com.mutatio.sis.reply.vo.FReplyVO;
import com.mutatio.sis.reply.vo.QReplyReplyVO;
import com.mutatio.sis.reply.vo.QReplyVO;
import com.mutatio.sis.security.CustomUser;

//ResponseBody + Controller
@RestController
public class ReplyController {
	
	@Inject
	IReplyService fReplyService;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@RequestMapping(value = "/reply/fReplyList", produces = "application/json; charset=UTF-8")
	public Map<String, Object> replyList(Model model, FReplySearchVO searchVO, HttpSession session){
		//service, dao 데이터 가지고 오면 됨
		/*
		 * UserVO user = (UserVO) session.getAttribute("USER_INFO"); String userId =
		 * user.getUserId(); model.addAttribute("userId", userId);
		 */
		
		List<FReplyVO> replyList = fReplyService.getReplyListByParent(searchVO);
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", replyList);
		
		return map;
	}
	
	@RequestMapping(value = "/reply/fReplyRegist", produces = "application/json; charset=UTF-8")
	public Map<String, Object> replyRegist(FReplyVO reply, HttpServletRequest request,HttpSession session){
		//등록해주세요
		fReplyService.registReply(reply);
	
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", "따로 보낼건 없지 등록 끝");
		
		return map;
	}
	
	
	@RequestMapping(value = "/reply/fReplyModify", produces = "application/json; charset=UTF-8")
	public Map<String, Object> replyModify(FReplyVO reply, HttpServletRequest request
			,HttpSession session) throws BizNotFoundException, BizAccessFailException{
		//수정해주세요
		System.out.println("USER_INFO = " + session.getAttribute("USER_INFO"));
		MemberVO user = (MemberVO)session.getAttribute("USER_INFO");
		reply.setFreeReMemId(user.getMemId());
		fReplyService.modifyReply(reply);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", "따로 보낼건 없지 등록 끝");
		
		return map;
	}
	
	@RequestMapping(value = "/reply/fReplyDelete", produces = "application/json; charset=UTF-8")
	public Map<String, Object> replyDelete(FReplyVO reply, HttpServletRequest request
			,HttpSession session) throws BizNotFoundException, BizAccessFailException{
		//수정해주세요
		System.out.println(reply);
		fReplyService.removeReply(reply);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", "삭제");
		
		return map;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*============================================== Question Reply ===============================================*/
	
	
	
	@Inject
	QReplyServiceImpl qReplyService;
	
	@ResponseBody
	@RequestMapping(value = "/reply/qReplyList", produces = "application/json; charset=UTF-8")
	public Map<String, Object> qReplyList(Model model, QReplyReplyVO quesNo_pagingVO, HttpSession session){
		logger.info("qReplyList be요청 :::",quesNo_pagingVO);
		List<QReplyVO> replyList = qReplyService.getReplyListByParent(quesNo_pagingVO);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", replyList);
		logger.info("qReplyList af요청 :::",map);
		return map;
	}
	
	@ResponseBody
	@RequestMapping(value = "/reply/qReplyRegist", produces = "application/json; charset=UTF-8")
	public Map<String, Object> qReplyRegist(QReplyVO reply, HttpServletRequest request,HttpSession session){
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			CustomUser user = (CustomUser) session.getAttribute("USER_INFO"); // get login info
			qReplyService.registReply(reply, user);
		} catch (BizNotFoundException e) {
			return null;
		}
	
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", "따로 보낼건 없지 등록 끝");
		
		return map;
	}
	
	
	@ResponseBody
	@RequestMapping(value = "/reply/qReplyModify", produces = "application/json; charset=UTF-8")
	public Map<String, Object> qReplyModify(QReplyVO reply, HttpServletRequest request
			,HttpSession session) throws BizNotFoundException, BizAccessFailException{
		//수정해주세요
		CustomUser user = (CustomUser) session.getAttribute("USER_INFO");
		reply.setQuesReMemId(user.getUsername());
		logger.info("qReplyModify::{}",reply);
		qReplyService.modifyReply(reply);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", "따로 보낼건 없지 등록 끝");
		
		return map;
	}
	
	@ResponseBody
	@RequestMapping(value = "/reply/qReplyDelete", produces = "application/json; charset=UTF-8")
	public Map<String, Object> qReplyDelete(QReplyVO reply, HttpServletRequest request
			,HttpSession session) throws BizNotFoundException, BizAccessFailException{
		//수정해주세요
		qReplyService.removeReply(reply);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", "삭제");
		
		return map;
	}
	
	
	
	
	
	
	
} // class



















