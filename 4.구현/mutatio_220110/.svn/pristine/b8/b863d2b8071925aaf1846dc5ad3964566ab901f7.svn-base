package com.mutatio.sis.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.mutatio.code.service.ICommCodeService;
import com.mutatio.sis.code.vo.CodeVO;
import com.mutatio.sis.common.vo.ResultMessageVO;
import com.mutatio.sis.exception.BizNotEffectedException;
import com.mutatio.sis.exception.BizNotFoundException;
import com.mutatio.sis.exception.BizUserNotMatchedException;
import com.mutatio.sis.free.vo.FreeVO;
import com.mutatio.sis.member.vo.MemberVO;
import com.mutatio.sis.question.service.QuestionService;
import com.mutatio.sis.question.vo.QuesVO;
import com.mutatio.sis.question.vo.QuestionSearchVO;

@Controller
public class QuestionController {
	
	@Inject
	QuestionService questionService;
	
	@Inject
	ICommCodeService codeService;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@ModelAttribute("codeList")
	public List<CodeVO> getCodeList(){
		return codeService.getCodeListByParent("FC00");
	}
	
	
	@RequestMapping("/quesList.do")
	public String quesList(Model model, QuestionSearchVO searchVO) {
		
		List<QuesVO> quesList = questionService.getQuesBoardList(searchVO);
		logger.info("quesList.do {}",quesList);
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("quesList",quesList);
		return "ques/quesList";
	} // quesList
	
	 
	@RequestMapping("/quesView.do")
	public String quesView(Model model, HttpSession sess, int quesNo) {
		logger.info("quesView 요청 quesNo : {}",quesNo);
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			MemberVO user = (MemberVO) sess.getAttribute("USER_INFO");
			QuesVO quesBoard = questionService.getQuesBoard(quesNo);
			questionService.checkRole(user, quesBoard);
			model.addAttribute("quesBoard",quesBoard);
			return "ques/quesView";
		} catch (BizNotFoundException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 호출 실패");
			resultMessageVO.setMessage("해당 게시판을 찾을 수 없습니다.");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
			return "common/message";
		}  catch(BizUserNotMatchedException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 편집 실패");
			resultMessageVO.setMessage("권한이 없는 사람입니다.");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
			return "common/message";
		}
	} // quesView
	
	
	
	@PostMapping("/quesEdit.do")
	public String quesEdit(Model model, HttpSession sess, int quesNo) {
		logger.info("quesEdit 요청 quesNo : {}",quesNo);
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			MemberVO user = (MemberVO) sess.getAttribute("USER_INFO"); // login user id
			QuesVO quesBoard = questionService.getQuesBoard(quesNo);
			
			questionService.checkRole(user, quesBoard);
			model.addAttribute("quesBoard",quesBoard);
			return "ques/quesEdit";
		} catch (BizNotFoundException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 호출 실패");
			resultMessageVO.setMessage("해당 게시판을 찾을 수 없습니다.");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
			return "common/message";
		} catch(BizUserNotMatchedException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 편집 실패");
			resultMessageVO.setMessage("권한이 없는 사람입니다.");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
			return "common/message";
		}
	} // quesEdit
	
	
	
	@PostMapping("/quesModify.do")
	public String quesModify(Model model, QuesVO quesVO) {
		logger.info("quesModify 요청 quesVO : {}",quesVO);
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			questionService.questModify(quesVO);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 수정");
			resultMessageVO.setMessage("문의 게시판 수정 성공");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
			return "common/message";
		} catch (BizNotFoundException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 호출 실패");
			resultMessageVO.setMessage("해당 게시판을 찾을 수 없습니다.");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
			return "common/message";
		} catch (BizNotEffectedException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 수정");
			resultMessageVO.setMessage("문의 게시판 수정 실패");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
			return "common/message";
		}
	} // quesModify
	
	
	
	@PostMapping("/quesDel.do")
	public String quesDel(Model model, QuesVO quesVO) {
		logger.info("quesDel 요청 quesVO : {}",quesVO);
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			questionService.questDelete(quesVO);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 삭제");
			resultMessageVO.setMessage("문의 게시판 삭제 성공");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
		} catch (BizNotFoundException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 호출 실패");
			resultMessageVO.setMessage("해당 게시판을 찾을 수 없습니다.");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
		} catch (BizNotEffectedException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 삭제");
			resultMessageVO.setMessage("문의 게시판 삭제 실패");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
		} 
		model.addAttribute("resultMessageVO",resultMessageVO);
		return "common/message";
	} // quesDel
	
	
	@RequestMapping("/quesForm.do")
	public String quesForm(Model model, HttpServletRequest req, HttpSession sess
						,@ModelAttribute("quesBoard")QuesVO quesVO) {
		// checking login 나중에 없어질 코드
		MemberVO user = (MemberVO) sess.getAttribute("USER_INFO");
		if (user == null) model.addAttribute("NFU","NotFoundUser");
		
		Integer quesThesisNo; // If the Question is made at thesisView
		try { quesThesisNo = Integer.parseInt(req.getParameter("thesNo")); }
		catch (NumberFormatException e) { quesThesisNo = null; }
		model.addAttribute("quesThesisNo", quesThesisNo);
		return "ques/quesForm";
	} // quesForm
	
	
	
	@PostMapping("/quesRegist.do")
	public String quesRegist(Model model, HttpSession sess, QuesVO quesVO) {
		logger.info("quesRegist 요청 quesVO : {}", quesVO);
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		MemberVO user = (MemberVO) sess.getAttribute("USER_INFO");
		quesVO.setQuesWriter(user.getMemId()); // registered user ID
		try {
			questionService.insertQuesBoard(quesVO);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 등록");
			resultMessageVO.setMessage("문의 게시판 등록 성공");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
		} catch (BizNotEffectedException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("게시판 등록");
			resultMessageVO.setMessage("문의 게시판 등록 실패");
			resultMessageVO.setUrl("/quesList.do");
			resultMessageVO.setUrlTitle("목록으로");
		}
		model.addAttribute("resultMessageVO",resultMessageVO);
		return "common/message";
	} // quesForm
	
	
} // class



























