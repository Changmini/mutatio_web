package com.mutatio.sis.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mutatio.code.service.ICommCodeService;
import com.mutatio.sis.code.vo.CodeVO;
import com.mutatio.sis.common.vo.ResultMessageVO;
import com.mutatio.sis.exception.BizNotEffectedException;
import com.mutatio.sis.exception.BizNotFoundException;
import com.mutatio.sis.login.service.ILoginService;
import com.mutatio.sis.login.vo.UserVO;
import com.mutatio.sis.member.service.MemberService;
import com.mutatio.sis.member.vo.MemberSearchVO;
import com.mutatio.sis.member.vo.MemberVO;
import com.mutatio.sis.security.CustomUser;

@Controller
@RequestMapping("/member")
public class MemberController {
	
	@Inject
	private MemberService memberService;
	
	@Inject
	private ILoginService loginService;
	
	@Inject
	ICommCodeService codeService;
	

	private Logger logger = org.slf4j.LoggerFactory.getLogger(this.getClass());
	
	@ModelAttribute("jobCodeList")
	public List<CodeVO> getJobCodeList(){
		return codeService.getCodeListByParent("JB00");
	}
	@ModelAttribute("conCodeList")	
	public List<CodeVO> getConCodeList(){
		return codeService.getCodeListByParent("CC00");
	}
	
	// 회원가입 form
	@RequestMapping(value = "join.do")
	public String memberForm(Model model) {
		return "member/memberJoin";
	}	
	
	// 회원등록
	@PostMapping("/joinAction.do")
	public String memberRegist(Model model, MemberVO member) {
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		logger.info("MemberVO {}", member);
		try {
			// 암호화 
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			String securePw = encoder.encode(member.getMemPass());
			member.setMemPass(securePw);
			
			memberService.joinMember(member);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member등록 성공");
			resultMessageVO.setMessage("member등록에 성공하였습니다");
			resultMessageVO.setUrl("/login.do");
			resultMessageVO.setUrlTitle("로그인 창");
		} catch (BizNotEffectedException e) {
			resultMessageVO.setResult(false);
			resultMessageVO.setTitle("member등록 실패");
			resultMessageVO.setMessage("member등록에 실패했습니다.");
			resultMessageVO.setUrl("/join.do");
			resultMessageVO.setUrlTitle("회원가입 창");
		} 
		model.addAttribute("resultMessageVO", resultMessageVO);
		return "common/message";
	}
	
	// 아이디 중복체크
	@PostMapping("/idCheck.do")
	@ResponseBody
	public String idCheck(Model model, @RequestParam(value="memId") String memId) throws BizNotEffectedException {
		logger.info("idCheck.do::{}", memId);
		MemberVO vo = memberService.getMember(memId, "check");
		String result = (vo == null) ? "0": vo.getMemId();
		return result;
	}
	
	// 회원정보 수정(보여주기)
	@GetMapping(value = "/info.do")
	public String infoEdit(Model model, HttpSession session) {
		CustomUser USER_INFO = (CustomUser) session.getAttribute("USER_INFO");
		String memId = USER_INFO.getUsername();
		logger.info("info 요청 memId:::{}",memId);
		
		MemberVO member = memberService.getMember(memId);
		model.addAttribute("member", member);
		return "member/memberInfo";
	}	
	/** 
	 * <pre> 
	 * 		회원정보 수정 -> 변경내용 저장 -> common/message .jsp 호출
	 * </pre>
	 * 
	 * @methodName    : infoEditPost
	 * @author        : pc12
	 * @date          : 2021.12.15
	 * @param session : USER_INFO
	 * @return        : .jsp 호출
	 */
	// 회원정보 수정(수정한것 넘기기)
	@PostMapping(value = "/info.do")
	public String infoEditPost(Model model, MemberVO member) {
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			logger.info("memberEdit 요청 member:::{}",member);
			memberService.modifyMember(member);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member수정 성공");
			resultMessageVO.setMessage("member수정에 성공하였습니다");
			resultMessageVO.setUrl("/home.do");
			resultMessageVO.setUrlTitle("home으로");
		} catch (BizNotEffectedException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member수정 실패");
			resultMessageVO.setMessage("member수정에 실패하였습니다");
			resultMessageVO.setUrl("/home.do");
			resultMessageVO.setUrlTitle("home으로");
		}
		return "common/message";
	}

	// 삭제
	@PostMapping(value= {"/memberDelete.do", "manager/memberDelete.do"})   //user가 탈퇴버튼 눌렀을 때 home으로 이동, 
	public String memberDelete(Model model, HttpSession sess, String memId) {
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		logger.info("memberDelete요청:::{}",memId);
		try {
			memberService.deleteMember(memId);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member 삭제 성공");
			resultMessageVO.setMessage("member삭제에 성공하였습니다");
//			if (vo.getMemId().equals("MANAGER")) {
//				resultMessageVO.setUrl("/userList.do");
//				resultMessageVO.setUrlTitle("목록으로");
//			}
		} catch (BizNotEffectedException ebe) {
			resultMessageVO.setResult(false);
			resultMessageVO.setTitle("member삭제 실패");
			resultMessageVO.setMessage("member삭제에 실패했습니다. BizNotEffected");
			resultMessageVO.setUrl("/userList.do");
		} catch (BizNotFoundException ebf) {
			System.out.println("BizNotFoundException1111");
			resultMessageVO.setResult(false);
			resultMessageVO.setTitle("member삭제 실패");
			resultMessageVO.setMessage("member삭제에 실패했습니다. member를 찾을 수 없습니다.");
			resultMessageVO.setUrl("/userList.do");
			resultMessageVO.setUrlTitle("목록으로");
		}
		model.addAttribute("resultMessageVO", resultMessageVO);
		return "common/message";
	}
		
} // class




