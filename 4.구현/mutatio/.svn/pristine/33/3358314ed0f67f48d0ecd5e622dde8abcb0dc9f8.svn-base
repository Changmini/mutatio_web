package com.mutatio.sis.thesis.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.mutatio.sis.exception.BizNotEffectedException;
import com.mutatio.sis.exception.BizNotFoundException;
import com.mutatio.sis.member.vo.MemberVO;
import com.mutatio.sis.thesis.dao.IThesisDao;
import com.mutatio.sis.thesis.vo.ThesisQualityVO;
import com.mutatio.sis.thesis.vo.ThesisSearchVO;
import com.mutatio.sis.thesis.vo.ThesisVO;

@Service
public class ThesisServiceImpl {
	
	@Inject
	IThesisDao thesisDao;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	/** 
	 * <pre> thesis count </pre>
	 * 
	* @methodName : getTotalRowCount 
	* @author     : pc52
	* @date       : 2021.12.31 
	* @param searchVO
	* @return int
	*/
	public int getTotalRowCount(ThesisSearchVO searchVO){
		int totalRowCount = thesisDao.getTotalRowCount(searchVO);
		return totalRowCount;
	}
	
	/** 
	 * <pre> A Single thesis </pre>
	 * 
	* @methodName : getThesis 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param thesNo
	* @return ThesisVO
	*/
	public ThesisVO getThesis(int thesNo) throws BizNotFoundException {
		ThesisVO thesis = thesisDao.getThesis(thesNo);
		if (thesis == null) throw new BizNotFoundException(); 
		return thesis;
	}
	
	
	/** 
	 * <pre> Multiple thesis </pre>
	 * 
	* @methodName : getThesisList 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param searchVO
	* @return List ThesisVO
	*/
	public List<ThesisVO> getThesisList(ThesisSearchVO searchVO) {
		// If Author name is searched..
		// And setting searchVO 
		if (searchVO.getSearchType() != null && searchVO.getSearchType().equals("W")) {
			List<Integer> authThesNo = thesisDao.getSearchAuths(searchVO.getSearchWord());
			searchVO.setAuthsThesNo(authThesNo);
		}
		
		int totalRowCount = thesisDao.getTotalRowCount(searchVO);
		searchVO.setTotalRowCount(totalRowCount);
		searchVO.pageSetting();
		
		List<ThesisVO> thesisList = thesisDao.getThesisList(searchVO);
		if (thesisList == null) return null; // exception 
		return thesisList;
	}
	
	
	/**
	 * <pre>
	 * 	It goes through an author search filter.
	 * </pre>
	 * @param thesisList, searchVO
	 * @return List ThesisVO
	 */
	public List<ThesisVO> searchAuth(List<ThesisVO> thesisList, ThesisSearchVO searchVO) {
		List<ThesisVO> reThesisList = new ArrayList<ThesisVO>();
		for (ThesisVO vo : thesisList) {
			// Get auths list
			List<String> auths = getAuths(vo.getThesNo()); 
			// Is there a search word(Author) in the list?
			if( auths.contains(searchVO.getSearchWord()) ) {
				// insert Thesis
				reThesisList.add(vo);
			}
		} // for
		return reThesisList;
	}
	
	
	/**
	 * <pre> Get Auths.. </pre>
	 *  
	* @methodName : getAuths 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param thesNo
	* @return List String
	*/
	public List<String> getAuths(int thesNo) {
		List<String> auths = thesisDao.getAuths(thesNo);
		if (auths == null) return null; // error를 쓰자
		return auths;
	}
	
	
	/**
	 * <pre> Thesis abstract </pre>
	 *  
	* @methodName : getKeyword 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param thesNo
	* @return List String
	*/
	public List<String> getKeyword(int thesNo) {
		List<String> thesis = thesisDao.getKeyword(thesNo);
		if (thesis == null) return null; // exception 
		return thesis;
	}
	
	
	/**
	 * <pre> The thesis quality figures </pre>
	 *  
	* @methodName : quality 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param thesNo
	* @return List float
	*/
	public float quality(int thesNo) {
		List<String> keywordLength = thesisDao.getKeyword(thesNo);
		if (keywordLength.size()==0) return (float) 0.0;
		
		float _if = thesisDao.impReg(thesNo);
		float _fres = thesisDao.freshness(thesNo);
		float _sca = thesisDao.scarcity(thesNo);
		float _pop = thesisDao.popular(thesNo);
		
		float qual = (float) (_if + _fres + 0.2 + _sca + _pop);
		return qual;
	}


	/**
	 * <pre>
	 * 	조회 논문과 유사한 논문 3가지를 추천해줌
	 * </pre>
	 * @param thesNo
	 * @return List ThesisVO
	 * @throws BizNotFoundException
	 */
	public List<ThesisVO> getAddInfo(int thesNo) throws BizNotFoundException {
		List<ThesisVO> addInfo = thesisDao.getAddInfo(thesNo);
		if(addInfo==null) throw new BizNotFoundException(); // error
		
		for (ThesisVO vo : addInfo) {
			List<String> auths = getAuths(vo.getThesNo());
			getAppendAuth(vo, auths);
		}
		return addInfo;
	}


	
	
	/**
	 * <pre>
	 * 	connect the keyword
	 * </pre>
	 * @param keywordList
	 * @return String
	 */
	public String getAppendKeyword(List<String> keywordList) {
		StringBuffer keywords = new StringBuffer(); // Temp value
		for (int i=0; i < keywordList.size(); i++) { // Connecting thesis keyword
			keywords.append(keywordList.get(i));
			keywords.append(", ");
		}
		if (keywords == null) keywords.append("nothing"); // Keyword not existv
		return keywords.toString();
	}

	
	

	/**
	 * <pre>
	 * 	connect the Auth
	 * </pre>
	 * @param single thesis
	 * @param auths
	 * @return ThesisVO
	 */
	public ThesisVO getAppendAuth(ThesisVO thesis, List<String> auths) {
		StringBuffer tempAuths = new StringBuffer();
		for (String auth : auths) {     // 
			tempAuths.append(auth+", ");
		}
		if (tempAuths != null) {
			thesis.setThesAuth(tempAuths.toString());
		}
		return thesis;
	}
	
	
	
	
	
	/**
	 * <pre>
	 * 		Compare the quality_index figures upload date.
	 * </pre>
	 * @return boolean
	 */
	private List<Integer> isDeffVal() {
		List<Integer> thesNo = thesisDao.isMoreThanOneVal();
		if (thesNo.size() > 0) return thesNo; // insert new thesis
		return null;
	}
	
	/**
	 * <pre>
	 * 		renewal thesis_quality_index
	 * </pre>
	 */
	private void renewalQualityData() {
		// new thesis data
		List<Integer> thesNo = isDeffVal();
		
		logger.info("Renewal Quality method::{}",thesNo);
		if (isDeffVal() != null) {
			// insert code
			for (Integer i : thesNo) {
				// setting theis no
				ThesisQualityVO tqVO = new ThesisQualityVO();				
				tqVO.setThesNo(i);
				tqVO.setQualityIndex(null);
				
				/*
				 * insert Quality Index (**NEW DATA)
				 * **thes_no => unique 
				 * Error can occur.  
				 */
				try {
					thesisDao.setQualityIndex(tqVO);
				} catch (Exception e) {
					System.out.println("Chart Update error::" + e);
					continue;
				}
			} // forE
			
			// update code
			List<Integer> allThesNo = thesisDao.getAllThesNo();
			for (Integer i : allThesNo) {
				// get quailty index
				float qIndex = quality(i);
				
				// setting theis no , quailty index
				ThesisQualityVO tqVO = new ThesisQualityVO();
				tqVO.setThesNo(i);
				tqVO.setQualityIndex(qIndex);
				
				// update Quality Index (RENEWAL DATA)
				thesisDao.setUpateQualityIndex(tqVO);
			} // forE
		} // if
		return ;
	}
	
	/**
	 * <pre>
	 *  총 논문의 개수가 달라지면 바뀜
	 * 	전체 논문에 대한 품질수치를 그래프를 통해서 제공
	 * </pre>
	 * @return Map<Float,Integer>
	 */
	public Map<String,Integer> graph() {
		renewalQualityData(); // update quality
		
		ThesisSearchVO searchVO = new ThesisSearchVO();
		int totalRowCount = thesisDao.getTotalRowCount(searchVO); // 관련 분야에서의 분포도를 확인할 수 있도록 하자!!!!
		searchVO.setTotalRowCount(totalRowCount);
		searchVO.setEndRowNum(totalRowCount);
		
		List<ThesisVO> thQualityList = thesisDao.getThesisQualityList(searchVO); // list에서 데이터 가져오듯이
		Map<String,Integer> Temp = new HashMap<String,Integer>();
		for (ThesisVO vo : thQualityList) { // get thesis
			String key = String.format("%.1f", vo.getQualityIndex());
			
			if (Temp.containsKey(key)) {
				int temp = Temp.get(key);
				Temp.put(key, ++temp);
			} else {
				Temp.put(key, 1);
			}
		}
		return Temp; // 0.0이 나오는 것은 Keyword를 찾지 못 하는 논문이기 때문이다.
	}
	


	/**
	 * <pre> Thesis abstract </pre>
	 *  
	* @methodName : getHomeThesis
	* @author     : pc52
	* @date       : 2021.12.21 
	* @return int
	*/
	public int getHomeThesis() {
		int thesis = thesisDao.getHomeThesis(); 
		return thesis;
	}

	
	
	public void getMemReferThesis(MemberVO member, int thesNo) throws BizNotEffectedException {
		int[] arrThes = {thesNo};
		member.setThesNo(arrThes);
		int cnt = thesisDao.getMemReferThesis(member);
		if(cnt < 1) throw new BizNotEffectedException();
		
	}

	
	
	
} // class
