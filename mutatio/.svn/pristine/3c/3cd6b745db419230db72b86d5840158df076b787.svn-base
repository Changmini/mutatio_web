package com.mutatio.sis.member.service;

import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import com.mutatio.sis.exception.BizDuplicateKeyException;
import com.mutatio.sis.exception.BizNotEffectedException;
import com.mutatio.sis.exception.BizNotFoundException;
import com.mutatio.sis.member.dao.IMemberDao;
import com.mutatio.sis.member.vo.MemberSearchVO;
import com.mutatio.sis.member.vo.MemberVO;

@Service
public class MemberService {
	
	@Inject
	IMemberDao memberDao;	
	
	public List<MemberVO> getMemList(MemberSearchVO searchVO) { // 1

		searchVO.setTotalRowCount(1000);
		searchVO.pageSetting();

		List<MemberVO> memberList = memberDao.getMemberList( // 3
				searchVO); // 2
		return memberList; // 4
	}
	
	// 회원가입
	public void joinMember(MemberVO member) throws BizNotEffectedException {
		int cnt = memberDao.joinMember(member);
		if(cnt<1) throw new BizNotEffectedException();
		
		//code를 memId와 맞춰서 저장 
		HashMap<String, String> map = new HashMap<String, String>();
		String[] conCode = member.getConCode();
		for (int i = 0; i < conCode.length; i++) {
			map.put("memId", member.getMemId());
			map.put("conCode", conCode[i]);
			cnt = memberDao.joinConCode(map);
			if(cnt<1) throw new BizNotEffectedException();	
		}
	}	
	
	// 회원정보 뷰 , 수정	
	public MemberVO getMember(String memId) {
		MemberVO member = memberDao.getMember(memId);
		return member;
	}
	
	// 회원정보 수정 완료
	public void modifyMember(MemberVO member) throws BizNotEffectedException{
		// interceptor를 사용할 것이니 회원이 존재하는지를 확인할 필요는 없지 않을까?
		int cnt = memberDao.updateMember(member);
		if(cnt <= 0) throw new BizNotEffectedException();
		HashMap<String, String> map = new HashMap<String, String>();
		String[] conCode = member.getConCode();
		for(int i = 0; i < conCode.length; i++) {
			map.put("memId", member.getMemId());
			map.put("conCode", conCode[i]);
			cnt = memberDao.joinConCode(map);
			if(cnt<1) throw new BizNotEffectedException();			
		}	
	}
	
	// 회원정보 삭제
	public void deleteMember(String memId) 
			throws BizNotEffectedException, BizNotFoundException{
		MemberVO vo = memberDao.getMember(memId);
		if(vo == null) throw new BizNotFoundException();
		int cnt = memberDao.deleteMember(memId);
		if(cnt <= 0) throw new BizNotEffectedException();
	}

	public String[] getConcernField(String memId) {
		List<String> cList = memberDao.getConcernField(memId);
		String[] cc = {cList.get(0), cList.get(1)};
		return cc;
	}
	
	// 즐겨찾기 삽입
	public void insertBookmark(HashMap<String, Object> paramMap) throws BizDuplicateKeyException {
		int cnt = memberDao.insertBookmark(paramMap);
		 if(cnt<1) throw new BizDuplicateKeyException();
	}
	
   // 즐겨찾기 출력
	public MemberVO getMemBookMark(String memId) throws BizNotEffectedException {
		int[] bookMark = memberDao.getMemBookMark(memId);
		if(bookMark == null) {
			throw new BizNotEffectedException();
		}
		MemberVO member = getMember(memId);
		member.setThesNo(bookMark);
		return member;
	}
	
	// 날짜 가져오기.ㅠ쓸데없이길어졋당..
	public String getMarkDate(HashMap<String, Object> paramMap) throws BizNotEffectedException {
		 String date = memberDao.getMarkDate(paramMap);
		 if(date == null) throw new BizNotEffectedException();
		 return date;
	}
	
	// 즐찾 삭쩨..
	public void deleteBookmark(HashMap<String, Object> paramMap) throws BizNotEffectedException{
		int cnt = memberDao.deleteBookMark(paramMap);
		if(cnt < 1) throw new BizNotEffectedException();
	}
	
	
	
	
	
}

