package com.mutatio.sis.thesis.service;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import com.mutatio.sis.exception.BizNotFoundException;
import com.mutatio.sis.thesis.dao.IThesisDao;
import com.mutatio.sis.thesis.vo.ThesisSearchVO;
import com.mutatio.sis.thesis.vo.ThesisVO;

@Service
public class ThesisServiceImpl {
	
	@Inject
	IThesisDao thesisDao;
	
	/** 
	 * <pre> A Single thesis </pre>
	 * 
	* @methodName : getThesis 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param thesNo
	* @return ThesisVO
	*/
	public ThesisVO getThesis(int thesNo) throws BizNotFoundException {
		ThesisVO thesis = thesisDao.getThesis(thesNo);
		if (thesis == null) throw new BizNotFoundException(); 
		return thesis;
	}
	
	
	/** 
	 * <pre> Multiple thesis </pre>
	 * 
	* @methodName : getThesisList 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param searchVO
	* @return List<ThesisVO>
	*/
	public List<ThesisVO> getThesisList(ThesisSearchVO searchVO) {
		int totalRowCount = thesisDao.getTotalRowCount(); 
		searchVO.setTotalRowCount(totalRowCount);
		searchVO.pageSetting();
		
		List<ThesisVO> thesisList = thesisDao.getThesisList(searchVO);
		if (thesisList == null) return null; // exception 
		return thesisList;
	}
	
	
	
	/**
	 * <pre> Get Auths.. </pre>
	 *  
	* @methodName : getAuths 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param thesNo
	* @return List<String>
	*/
	public List<String> getAuths(int thesNo) {
		List<String> auths = thesisDao.getAuths(thesNo);
		if (auths == null) return null; // error를 쓰자
		return auths;
	}
	
	
	/**
	 * <pre> Thesis abstract </pre>
	 *  
	* @methodName : getKeyword 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param thesNo
	* @return List<String>
	*/
	public List<String> getKeyword(int thesNo) {
		List<String> thesis = thesisDao.getKeyword(thesNo);
		if (thesis == null) return null; // exception 
		return thesis;
	}
	
	
	/**
	 * <pre> The thesis quality figures </pre>
	 *  
	* @methodName : quality 
	* @author     : pc24
	* @date       : 2021.12.09 
	* @param thesNo
	* @return List<String>
	*/
	public float quality(int thesNo) {
		List<String> keywordLength = thesisDao.getKeyword(thesNo);
		if (keywordLength.size()==0) return (float) 0.0;
		
		float _if = thesisDao.impReg(thesNo);
		float _fres = thesisDao.freshness(thesNo);
		float _sca = thesisDao.scarcity(thesNo);
		float _pop = thesisDao.popular(thesNo);
		
		float qual = (float) (_if + _fres + 0.2 + _sca + _pop);
		return qual;
	}


	/**
	 * <pre>
	 * 	조회 논문과 유사한 논문 3가지를 추천해줌
	 * </pre>
	 * @param thesNo
	 * @return List <ThesisVO>
	 * @throws BizNotFoundException
	 */
	public List<ThesisVO> getAddInfo(int thesNo) throws BizNotFoundException {
		List<ThesisVO> addInfo = thesisDao.getAddInfo(thesNo);
		if(addInfo==null) throw new BizNotFoundException(); // error
		
		for (ThesisVO vo : addInfo) {
			List<String> auths = getAuths(vo.getThesNo());
			getAppendAuth(vo, auths);
		}
		return addInfo;
	}


	/**
	 * <pre>
	 * 	connect the keyword
	 * </pre>
	 * @param keywordList
	 * @return String
	 */
	public String getAppendKeyword(List<String> keywordList) {
		StringBuffer keywords = new StringBuffer(); // Temp value
		for (int i=0; i < keywordList.size(); i++) { // Connecting thesis keyword
			keywords.append(keywordList.get(i));
			keywords.append(", ");
		}
		if (keywords == null) keywords.append("nothing"); // Keyword not existv
		return keywords.toString();
	}


	/**
	 * <pre>
	 * 	connect the Auth
	 * </pre>
	 * @param single thesis
	 * @param auths
	 * @return ThesisVO
	 */
	public ThesisVO getAppendAuth(ThesisVO thesis, List<String> auths) {
		StringBuffer tempAuths = new StringBuffer();
		for (String auth : auths) {     // 
			tempAuths.append(auth+", ");
		}
		if (tempAuths != null) {
			thesis.setThesAuth(tempAuths.toString());
		}
		return thesis;
	}
	
	
	/**
	 * <pre>
	 * 	전체 논문에 대한 품질수치를 그래프를 통해서 제공
	 * </pre>
	 * @return Map<Float,Integer>
	 */
	public Map<String,Integer> graph() {
		ThesisSearchVO searchVO = new ThesisSearchVO();
		int totalRowCount = thesisDao.getTotalRowCount(); 
		searchVO.setTotalRowCount(totalRowCount);
		searchVO.setEndRowNum(totalRowCount);
		
		List<ThesisVO> thList = thesisDao.getThesisList(searchVO);
		Map<String,Integer> cnt = new HashMap<String,Integer>();
		
		float[] a = new float[1000];
		int i = 0;
		for (ThesisVO vo : thList) {
			float keyF = quality(vo.getThesNo());
			a[i++] = keyF;
			String key = String.format("%.1f", keyF);
			System.out.println(key);
			
			if (cnt.containsKey(key)) {
				int temp = cnt.get(key);
				cnt.put(key, ++temp);
			} else {
				cnt.put(key, 1);
			}
		}
		return cnt; // 0.0이 나오는 것은 Keyword를 찾지 못 하는 논문이기 때문이다.
	}
	
	
	
} // class
