package com.mutatio.sis.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mutatio.sis.common.vo.ResultMessageVO;
import com.mutatio.sis.member.service.MemberService;
import com.mutatio.sis.member.vo.MemberSearchVO;
import com.mutatio.sis.member.vo.MemberVO;
import com.mutatio.sis.exception.BizNotEffectedException;
import com.mutatio.sis.exception.BizNotFoundException;
import com.mutatio.sis.exception.DaoDuplicateKeyException;
import com.mutatio.sis.login.service.ILoginService;

@Controller
public class MemberController {
	
	@Inject
	private MemberService memberService;
	
	@Inject
	private ILoginService loginService;
	
	private Logger logger = org.slf4j.LoggerFactory.getLogger(this.getClass());
	
	// 회원가입 form
	@RequestMapping(value = "join.do")
	public String memberForm(Model model) {
		return "member/memberJoin";
	}
	
	// 회원등록
	@PostMapping("/joinAction.do")
	public String memberRegist(Model model, MemberVO member) {
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			memberService.joinMember(member);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member등록 성공");
			resultMessageVO.setMessage("member등록에 성공하였습니다");
			resultMessageVO.setUrl("/login.do");
			resultMessageVO.setUrlTitle("로그인 창");
		} catch (BizNotEffectedException e) {
			resultMessageVO.setResult(false);
			resultMessageVO.setTitle("member등록 실패");
			resultMessageVO.setMessage("member등록에 실패했습니다.");
			resultMessageVO.setUrl("/join.do");
			resultMessageVO.setUrlTitle("회원가입 창");
		} catch (DaoDuplicateKeyException d) {
			resultMessageVO.setResult(false);
			resultMessageVO.setTitle("member등록 실패");
			resultMessageVO.setMessage("존재하는 아이디입니다.");
			resultMessageVO.setUrl("/join.do");
			resultMessageVO.setUrlTitle("회원가입 창");
		}
		model.addAttribute("resultMessageVO", resultMessageVO);
		return "common/message";
	}
	
	@PostMapping("/idCheck.do")
	@ResponseBody
	public String idCheck(Model model, @RequestParam(value="memId") String memId) throws BizNotEffectedException {
		String str = "";
		int idCheck = memberService.idCheck(memId);
		if(idCheck == 1) {
			str = "No";
		}else {
			str = "Yes";
		}
		return str;
	}
	
	// 회원정보 수정
	@GetMapping(value = "/info.do")
	public String infoEdit(Model model, HttpSession session) {
		MemberVO USER_INFO = (MemberVO) session.getAttribute("USER_INFO");
		MemberVO member = memberService.getMember(USER_INFO.getMemId());
		model.addAttribute("member", member);
		return "member/member_info";
	}
	/** 
	 * <pre> 
	 * 		회원정보 수정 -> 변경내용 저장 -> common/message .jsp 호출
	 * </pre>
	 * 
	 * @methodName    : infoEditPost
	 * @author        : pc12
	 * @date          : 2021.12.15
	 * @param session : USER_INFO
	 * @return        : .jsp 호출
	 */
	@PostMapping(value = "/info.do")
	public String infoEditPost(Model model, MemberVO memberVO) {
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			memberService.modifyMember(memberVO);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member수정 성공");
			resultMessageVO.setMessage("member수정에 성공하였습니다");
			resultMessageVO.setUrl("/home.do");
			resultMessageVO.setUrlTitle("home으로");
		} catch (BizNotEffectedException e) {
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member수정 실패");
			resultMessageVO.setMessage("member수정에 실패하였습니다");
			resultMessageVO.setUrl("/home.do");
			resultMessageVO.setUrlTitle("home으로");
		}
		return "common/message";
	}

	// 삭제
	@RequestMapping("/member/memberDelete.do")
	public String memberDelete(Model model, String memId) {
		ResultMessageVO resultMessageVO = new ResultMessageVO();
		try {
			memberService.deleteMember(memId);
			resultMessageVO.setResult(true);
			resultMessageVO.setTitle("member 삭제 성공");
			resultMessageVO.setMessage("member삭제에 성공하였습니다");
			resultMessageVO.setUrl("/member/memberList.do");
			resultMessageVO.setUrlTitle("목록으로");
		} catch (BizNotEffectedException ebe) {
			resultMessageVO.setResult(false);
			resultMessageVO.setTitle("member삭제 실패");
			resultMessageVO.setMessage("member삭제에 실패했습니다. BizNotEffected");
			resultMessageVO.setUrl("/member/memberList.do");
			System.out.println("BizNotEffectedException");
		} catch (BizNotFoundException ebf) {
			System.out.println("BizNotFoundException1111");
			resultMessageVO.setResult(false);
			resultMessageVO.setTitle("member삭제 실패");
			resultMessageVO.setMessage("member삭제에 실패했습니다. member를 찾을 수 없습니다.");
			resultMessageVO.setUrl("/member/memberList.do");
			resultMessageVO.setUrlTitle("목록으로");
		}
		model.addAttribute("resultMessageVO", resultMessageVO);
		return "common/message";
	}
	
	// 회원 목록
	@RequestMapping("/member/memberList.do")
	public String memberList(Model model, MemberSearchVO searchVO) {

		List<MemberVO> memberList = memberService.getMemList(searchVO);
		model.addAttribute("memberList", memberList);
		return "/member/memberList";
	}
		
}
